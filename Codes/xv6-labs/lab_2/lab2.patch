diff --git a/Makefile b/Makefile
index 71b155b..b2a1edb 100644
--- a/Makefile
+++ b/Makefile
@@ -134,6 +134,7 @@ UPROGS=\
 	$U/_zombie\
 	$U/_sleep\
 	$U/_find\
+	$U/_sysinfotest\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..5791024 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -187,3 +187,10 @@ void            virtio_disk_intr(void);
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
+
+
+struct sysinfo;
+// kalloc.c
+uint64      get_freemem(void);
+// proc.c
+uint64      get_nproc();
\ No newline at end of file
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..b8a434e 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -80,3 +80,17 @@ kalloc(void)
     memset((char*)r, 5, PGSIZE); // fill with junk
   return (void*)r;
 }
+
+uint64 get_freemem(void)
+{
+    acquire(&kmem.lock);
+    struct run *r = kmem.freelist;
+    uint64 cnt = 0;
+    while(r)
+    {
+        cnt++;
+        r = r->next;
+    }
+    release(&kmem.lock);
+    return cnt * PGSIZE;
+}
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..402cb05 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -681,3 +681,18 @@ procdump(void)
     printf("\n");
   }
 }
+
+
+uint64 get_nproc()
+{
+    struct proc *p;
+    uint64 cnt = 0;
+    for (p = proc; p < &proc[NPROC]; p++)
+    {
+        if (p->state != UNUSED)
+        {
+            cnt++;
+        }
+    }
+    return cnt;
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..5d88a26 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,5 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..6a71b9e 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_sysinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +127,7 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_sysinfo] sys_sysinfo,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..8e25066 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_sysinfo 22
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..10e2256 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "sysinfo.h"
 
 uint64
 sys_exit(void)
@@ -89,3 +90,23 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
+uint64 sys_sysinfo(void)
+{
+    uint64 addr;
+    argaddr(0, &addr);
+    // if (argaddr(0, &addr) < 0)
+    // {
+    //     return -1;
+    // }
+    struct sysinfo info;
+    struct proc *p=myproc();
+    info.freemem=get_freemem();
+    info.nproc=get_nproc();
+ 
+    if(copyout(p->pagetable, addr, (char*)&info, sizeof(info))) {
+    return -1;
+  }
+  return 0;
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..4d682fa 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,5 +1,5 @@
 struct stat;
-
+struct sysinfo;
 // system calls
 int fork(void);
 int exit(int) __attribute__((noreturn));
@@ -22,6 +22,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int sysinfo(struct sysinfo*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..82f8d72 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("sysinfo");
+
